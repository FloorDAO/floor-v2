// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;


/**
 * Strategies will hold the logic for interacting with external platforms to stake
 * and harvest reward yield. Each vault will require its own strategy implementation
 * to allow for different immutable variables to be defined during construct.
 *
 * This will follow a similar approach to how NFTX offer their eligibility module
 * logic, with a lot of the power coming from inheritence.
 */
interface IBaseStrategy {

    /// @dev When strategy receives a deposit
    event Deposit(address token, uint amount);

    /// @dev When strategy is harvested
    event Harvest(address token, uint amount);

    /// @dev When a staked user exits their position
    event Exit(address token, uint amount);

    /**
     * Name of the strategy.
     */
    function name() external view returns (string memory);

    /**
     * Return the the address of the yield token.
     */
    function yieldToken() external view returns (address[] calldata);

    /**
     * Return the the address of the underlying token. This could be the same as
     * the yield token.
     */
    function underlyingToken() external view returns (address[] calldata);

    /**
     * Deposit underlying token or yield token to corresponding strategy.
     *
     * Requirements:
     *  - Caller should make sure the token is already transfered into the strategy contract.
     *  - Caller should make sure the deposit amount is greater than zero.
     */
    function deposit(address[] calldata _token, uint256[] calldata _amount) external returns (address[] calldata token_, uint256[] calldata yieldAmount_);

    // The amount of token that has not been minted into floor
    function unmintedRewards();

    // The total rewards generated by the strat
    function totalRewardsGenerated();

    // The total number of rewards generated available
    function rewardsAvailable();

    // Claim rewards from external party
    function claimRewards();

    // Allows claimed rewards to be moved to the {Treasury}.
    function transferRewardsToTreasury();

    /**
     * Harvest possible rewards from strategy. The rewards generated from the strategy
     * will be handled Treasury and allocated as FLOOR (if not paused), which will in
     * turn be made available to mint in the {RewardsLedger}.
     */
    function harvest() external returns (address[] calldata token_, uint256[] calldata returnAmount_, uint256[] calldata treasuryReturnAmount_);

    /**
     * Allows a staked user to exit their strategy position.
     */
    function exit(address _recipient, address[] calldata _token, uint256[] calldata _amount) external returns (address[] calldata token_, uint256[] calldata returnAmount_);

}
