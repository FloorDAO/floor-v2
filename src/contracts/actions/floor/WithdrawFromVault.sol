// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';

import {AuthorityControl} from '@floor/authorities/AuthorityControl.sol';

import {IAction} from '@floor-interfaces/actions/Action.sol';
import {IStrategyFactory} from '@floor-interfaces/strategies/StrategyFactory.sol';

/**
 * ..
 */
contract FloorWithdrawFromVault is AuthorityControl, IAction {

    /**
     * Store our required information to action a swap.
     */
    struct ActionRequest {
        address strategyFactory;
        address[] tokens;
        uint strategyId;
        uint[] amounts;
    }

    /**
     * Set up our connection to the Treasury to ensure future calls only come from this
     * trusted source.
     *
     * @param _authority {AuthorityRegistry} contract address
     */
    constructor(address _authority) AuthorityControl(_authority) {}

    /**
     * Sells our specified `tokenIds` from the NFTX vault collection to gain instant
     * ETH liquidity. If the transaction doesn't provide the specified required `minEthOut`
     * then the transaction will be reverted by NFTX.
     *
     * @param _request Packed bytes that will map to our `ActionRequest` struct
     *
     * @return received The amount of ETH generated by the execution
     */
    function execute(bytes calldata _request) public payable onlyRole(TREASURY_MANAGER) returns (uint) {
        // Unpack the request bytes data into our struct
        ActionRequest memory request = abi.decode(_request, (ActionRequest));

        // Action the token to be withdrawn from the vault
        uint[] memory received = IStrategyFactory(request.strategyFactory).withdraw(request.strategyId, request.tokens, request.amounts);

        // Transfer the tokens to the {Treasury}
        for (uint i; i < request.tokens.length;) {
            IERC20(request.tokens[i]).transfer(msg.sender, received[i]);
            unchecked { ++i; }
        }

        return 0;
    }

}
